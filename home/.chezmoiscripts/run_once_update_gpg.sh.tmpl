#!/usr/bin/env zsh
#
# Updates the expiration date of the GPG key for the user with email address
# $EMAIL_ADDRESS to 1 year if the key will expire in less than 6 months.
#
# GPG key status:
{{/* https://github.com/gpg/gnupg/blob/master/doc/DETAILS */}}
{{- range output "gpg" "--list-keys" "--with-colons" | splitList "\n" -}}
{{-   if hasPrefix "tru:" .  -}}
{{-     $expirationTimestamp := (split ":" .)._4 -}}
{{-     $timeUntilExpiration := now | unixEpoch | sub $expirationTimestamp -}}
{{-     $SixMonthsInSeconds := mul 60 60 24 7 4 6 }}
{{-     if gt $timeUntilExpiration $SixMonthsInSeconds  -}}
# Your GPG key is valid and will expire in more than 6 months
{{-     else -}}
# Your GPG key is valid and will expire on {{ output "date" "-Idate" "-r"  $expirationTimestamp }}
{{-     end -}}
{{-   end -}}
{{- end }}

readonly EMAIL_ADDRESS="nguyen.jeremyt@gmail.com"
readonly -i SIX_MONTHS_IN_SECONDS="$((60 * 60 * 24 * 7 * 4 * 6))"

function error() {
  echo "[$(date "+%Y-%m-%dT%H:%M:%S%z")]: $*" >&2
}

function get_gpg_key_expiration_date() {
  local fingerprint="$1"

  if [[ -z "${fingerprint}" ]]; then
    error "Error: No fingerprint provided"
    return 1
  fi

  gpg --list-keys --with-colons "${fingerprint}" \
    | grep "^tru:" \
    | cut -f 5 -d ":"

  if (( PIPESTATUS[0] != 0 )); then
    error "Error: Could not find expiration date for key with fingerprint ${fingerprint}"
    return 1
  fi
}

function {
  echo "GPG script file hash has updated. Finding GPG key for user ${EMAIL_ADDRESS}..."

  # I am using `gpg --list-keys` with option `show-only-fpr-mbox` to get the
  # primary GPG key's fingerprint. This may be discouraged as parsing is only
  # recommended with `--with-colons`, but that would make it difficult to
  # distinguish between the fingerprints of keys owned by someone else or
  # subkeys.
  #
  # Note: SHA-1 fingerprint is 40 characters long in hexadecimal (160 bits = 20
  # bytes)
  fingerprint=$(
    gpg --list-keys --list-options show-only-fpr-mbox \
      | grep -E "^[[:xdigit:]]{40} ${EMAIL_ADDRESS}$" \
      | cut -f 1 -w
  )

  echo "Checking expiration date for user ${EMAIL_ADDRESS} key with fingerprint: ${fingerprint}"

  local -i current_expiration_timestamp
  current_expiration_timestamp="$(get_gpg_key_expiration_date ${fingerprint})"

  echo "${fingerprint} will expire on $(date -Idate -r ${current_expiration_timestamp}). Checking if extending expiration date is necessary..."

  now=$(date +%s)
  if (( (now - current_expiration_timestamp) < SIX_MONTHS_IN_SECONDS )); then
    echo "Key ${fingerprint} will expire in more than 6 months. Confirm script hash is correct. No action required."
    return 0
  fi

  echo "Key ${fingerprint} will expire in less than 6 months. Setting its expiration date to 1 year from now..."

  gpg --quick-set-expire "${fingerprint}" "1y"

  echo "Updated expiration date for key ${fingerprint} and all its subkeys"

  # I am not sure why, but after updating the expiration date, when this command
  # is ran for the first time, the expiration date will always be "1"
  # (formatted to "1969-12-31") -- hence piping output to `/dev/null`.
  gpg --list-keys --with-colons "${fingerprint}" &> /dev/null

  new_expiration_timestamp="$(get_gpg_key_expiration_date ${fingerprint})"

  echo "New expiration date for key ${fingerprint} is $(date -Idate -r ${new_expiration_timestamp})"
}
